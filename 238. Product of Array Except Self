O(N) && O(N)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n= nums.size();
        vector<int> left(n),right(n),ans;
        left[0]=1;
        for (int i=1;i<n;i++)
        {
            left[i]=left[i-1]*nums[i-1];
        }
        right[n-1]=1;
        for (int i=n-2;i>=0;i--)
        {
            right[i]=right[i+1]*nums[i+1];
        }
        for (int i=0;i<n;i++)
        {
            ans.push_back(left[i]*right[i]);
        }
        return ans;
        
    }
};


O(N)  && O(1)
class Solution {
public:
    vector<int> productExceptSelf(vector<int>& arr) {
        int n=arr.size();
        vector<int> ans(n);
        
        ans[0]=1;
        for (int i=1;i<n;i++)
        {
            ans[i]=ans[i-1]*arr[i-1];
        }
        int mul=1;
        for (int i=n-2;i>=0;i--)
        {
            ans[i]*=mul*arr[i+1];
            mul=mul*arr[i+1];
        }
        return ans;
        
    }
};
