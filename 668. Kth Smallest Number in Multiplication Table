----M1 Will give TLE but intutive
class Solution {
public:
    int findKthNumber(int m, int n, int k) {
        if (m>n) swap(n,m);
        priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>>min_h;
        for (int i=1;i<=m;i++)
        {
            min_h.push({i*1,{i-1,0}});
        }
        int x,y;
     pair<int,pair<int,int>> p;
        while(k--)
        {
             p=min_h.top();  min_h.pop();
            x= p.second.first;
            y=p.second.second;
            if (y+1<n)
            {
                min_h.push({(x+1)*(y+2),{x,y+1}});
            }
            cout<<p.first<<' ';
        }
        
        return p.first;
        
    }
};



---M2 optimised
class Solution {
public:
    bool smallthan(int m,int n,int mid,int k)
    {
        int c=0;
        for (int i=1;i<=m;i++)
        {
            c+=min(n,mid/i);
        }
        
        return c>=k? true: false;
    }
    int findKthNumber(int m, int n, int k) {
        if (m>n)   swap(m,n);
        int l=1,h=m*n;
        int ans,mid;
        while(l<=h)
        {
            mid=l+(h-l)/2;
            if (smallthan(m,n,mid,k))
            {
                ans=mid;
                h=mid-1;
            }
            else l=mid+1;
            
        }
        return ans;
        
    }
};
